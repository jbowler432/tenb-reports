import os.path, sys
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir))
import tenbIOcore as tc
import utilities as ut
import datetime

'''
Functionality being used to create a dynamic tag of explotables assets.
Creates a list of all IP addresses with exploitable vulnerabilities.
Updates a tag with this list of IPs.
'''

# file and directory locations
key_file="../../io_keys.json" # location of your key file
results_dir="../results/" # the directory for your results
styles_dir="../styles/" #style sheet location for web pages
reports_dir="../report_samples/"

api_keys=tc.read_keys(key_file,"sandbox")
get_new_data=1
results_file=results_dir+"vulns.json"


if get_new_data==1:
	# export some vuln data
	num_assets=50
	filters={
		"tag.Essential8":["Internal","Internet-Facing"]
	}
	payload={
		"filters": filters,
		"num_assets": num_assets
	}
	chunk_results=tc.check_and_download_vuln_chunks(api_keys,payload,results_file)

decoded=ut.read_json_file(results_file)
values_to_print=["asset","plugin"]
exploitable_assets=[]
for x in decoded:
	exploitable=x["plugin"]["exploit_available"]
	print(exploitable)
	ipv4=x["asset"]["ipv4"]
	if exploitable==True:
		if ipv4 not in exploitable_assets:
			exploitable_assets.append(ipv4)

print(exploitable_assets)

# this is the tag that will be updated
tag_value="Exploitable"
tag_cat="Essential8"
tag_uuid=tc.get_tag_uuid(api_keys,tag_cat,tag_value)
print(tag_uuid)

payload = {
	"filters": {"asset": {"and": [
	{
	"field": "ipv4",
	"operator": "eq",
	"value": ut.list_to_string(exploitable_assets)
	}
	]}},
	"category_name": "Essential8",
	"value": "Exploitable"
}

decoded=tc.update_tag_value(api_keys,payload,tag_uuid)
print(decoded)
